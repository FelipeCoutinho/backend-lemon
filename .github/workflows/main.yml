on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
env:
  REGISTRY: southamerica-east1-docker.pkg.dev/backendlemon/backend-lemon
  IMAGE_NAME: lemon-backend/lemon-backend-image
  PROJECT_ID: backendlemon
  GAR_LOCATION: southamerica-east1
  SERVICE: lemon-backend
  REGION: southamerica-east1
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  PORT: 3001
jobs:
  ci:
    name: CI - Build And Test
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.3.0
        with:
          cosign-release: 'v2.1.1'
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
      - name: Install dependencies
        run: npm install && npm install -g prisma

      - name: Apply all pending migrations to the database
        run: npx prisma generate & npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ env.PORT }}

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Sign The Published Docker Image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
  cd:
    needs: ci
    name: CD - Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Deploy Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: 'us-docker.pkg.dev/techfit-backend/techfit-images/techfit-backend/techfit-backend-image:main'
          env_vars: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
      - name: Show Output
        run: 'curl "${{ steps.deploy.outputs.url }}"'
